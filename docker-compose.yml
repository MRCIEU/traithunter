version: "3.4"

services:

  # st-demo:
  #   build:
  #     context: ./st-demo
  #   restart: unless-stopped
  #   ports:
  #     - ${ST_DEMO_PORT:-8646}:80
  #   command: bash -c "streamlit run streamlit_app.py --server.port=80 --server.address=0.0.0.0"
  #   env_file:
  #     - .env
  #   volumes:
  #     - ./st-demo/:/app
  #   networks:
  #     - default

  backend:
    build:
      context: ./
      dockerfile: backend/Dockerfile
    restart: unless-stopped
    user: "${UID}:${GID}"
    ports:
      - ${DOCKER_BACKEND_PORT:-8635}:80
    # TODO: use appropriate entrypoint command for prod
    command: bash -c "make run"
    env_file:
      - .env
    volumes:
      - ./backend/:/app
      - ./data:/data
      - ./models:/models
      - ./common_funcs:/common_funcs
    environment:
      - MAX_WORKERS=1
    networks:
      - default

  backend-dev:
    build:
      context: ./
      dockerfile: backend/Dockerfile
    restart: unless-stopped
    user: "${UID}:${GID}"
    ports:
      - ${DOCKER_BACKEND_DEV_PORT:-8645}:80
    command: bash -c "make run"
    env_file:
      - .env
    volumes:
      - ./backend/:/app
      - ./data:/data
      - ./models:/models
      - ./common_funcs:/common_funcs
    environment:
      - MAX_WORKERS=1
    networks:
      - default

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VUE_APP_WEB_BACKEND_URL=${DOCKER_BACKEND_URL:-localhost:8635}
    restart: always
    ports:
      - ${DOCKER_FRONTEND_PORT:-8636}:80
    networks:
      - default

  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile-dev
      args:
        - VUE_APP_WEB_BACKEND_URL=${DOCKER_BACKEND_DEV_URL:-localhost:8645}
    restart: unless-stopped
    command: sh -c "make install run"
    volumes:
      - ./frontend/:/app/
    environment:
      - NODE_ENV=development
      - VUE_APP_WEB_BACKEND_URL=${DOCKER_BACKEND_DEV_URL:-localhost:8645}
    ports:
      - ${DOCKER_FRONTEND_DEV_PORT:-8646}:8080
    networks:
      - default

  elasticsearch:
    image: elasticsearch:8.15.0
    restart: unless-stopped
    ports:
      - ${DOCKER_ES_PORT:-6360}:9200
    tty: true
    volumes:
      - phenotype_es_data-new:/usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - path.repo=/usr/share/elasticsearch/backup

  kibana:
    image: kibana:8.15.0
    restart: unless-stopped
    ports:
      - ${DOCKER_KIBANA_PORT:-6365}:5601
    environment:
      - "ELASTICSEARCH_HOSTS=http://elasticsearch:9200"
    depends_on:
      - elasticsearch

volumes:
  phenotype_es_data-new:
    driver: local
